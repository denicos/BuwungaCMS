//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Higgs.Mbale.EF.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Higgs.Mbale.EF.Context;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MbaleEntities : DbContext,IDbContext
    {
        public MbaleEntities()
            : base("name=MbaleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<BatchProduct> BatchProducts { get; set; }
        public virtual DbSet<TransactionSubType> TransactionSubTypes { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<BranchSector> BranchSectors { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<ActivityBatchCasual> ActivityBatchCasuals { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityBranch> ActivityBranches { get; set; }
        public virtual DbSet<OrderGradeSize> OrderGradeSizes { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<StockGradeSize> StockGradeSizes { get; set; }
        public virtual DbSet<CasualActivity> CasualActivities { get; set; }
        public virtual DbSet<StockProduct> StockProducts { get; set; }
        public virtual DbSet<StoreStock> StoreStocks { get; set; }
        public virtual DbSet<StoreGradeSize> StoreGradeSizes { get; set; }
        public virtual DbSet<DeliveryStock> DeliveryStocks { get; set; }
        public virtual DbSet<BuveraGradeSize> BuveraGradeSizes { get; set; }
        public virtual DbSet<StoreBuveraGradeSize> StoreBuveraGradeSizes { get; set; }
        public virtual DbSet<InventoryCategory> InventoryCategories { get; set; }
        public virtual DbSet<DeliveryGradeSize> DeliveryGradeSizes { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategories { get; set; }
        public virtual DbSet<AccountTransactionActivity> AccountTransactionActivities { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchSupply> BatchSupplies { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<FlourTransferGradeSize> FlourTransferGradeSizes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<BatchOutPut> BatchOutPuts { get; set; }
        public virtual DbSet<FactoryExpense> FactoryExpenses { get; set; }
        public virtual DbSet<LabourCost> LabourCosts { get; set; }
        public virtual DbSet<MachineRepair> MachineRepairs { get; set; }
        public virtual DbSet<OtherExpense> OtherExpenses { get; set; }
        public virtual DbSet<Buvera> Buveras { get; set; }
        public virtual DbSet<BuveraTransfer> BuveraTransfers { get; set; }
        public virtual DbSet<BuveraTransferGradeSize> BuveraTransferGradeSizes { get; set; }
        public virtual DbSet<StoreBuveraTransferGradeSize> StoreBuveraTransferGradeSizes { get; set; }
        public virtual DbSet<StoreFlourTransferGradeSize> StoreFlourTransferGradeSizes { get; set; }
        public virtual DbSet<DeliveryBatch> DeliveryBatches { get; set; }
        public virtual DbSet<FlourTransfer> FlourTransfers { get; set; }
        public virtual DbSet<FlourTransferBatch> FlourTransferBatches { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<CasualWorker> CasualWorkers { get; set; }
        public virtual DbSet<BatchGradeSize> BatchGradeSizes { get; set; }
        public virtual DbSet<CashTransfer> CashTransfers { get; set; }
        public virtual DbSet<CashSaleBatch> CashSaleBatches { get; set; }
        public virtual DbSet<CashSaleGradeSize> CashSaleGradeSizes { get; set; }
        public virtual DbSet<DocumentGradeSize> DocumentGradeSizes { get; set; }
        public virtual DbSet<MaizeBrandStore> MaizeBrandStores { get; set; }
        public virtual DbSet<CashSale> CashSales { get; set; }
        public virtual DbSet<UtilityCategory> UtilityCategories { get; set; }
        public virtual DbSet<UtilityAccount> UtilityAccounts { get; set; }
        public virtual DbSet<UserBranch> UserBranches { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<Delivery> Deliveries { get; set; }
        public virtual DbSet<BatchProjection> BatchProjections { get; set; }
        public virtual DbSet<RequistionCategory> RequistionCategories { get; set; }
        public virtual DbSet<Supply> Supplies { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<InventoryPurchase> InventoryPurchases { get; set; }
        public virtual DbSet<Cash> Cashes { get; set; }
        public virtual DbSet<AssetCategory> AssetCategories { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<WeightLoss> WeightLosses { get; set; }
        public virtual DbSet<BatchDeliveryGradeSize> BatchDeliveryGradeSizes { get; set; }
        public virtual DbSet<BatchTransferGradeSize> BatchTransferGradeSizes { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CashSaleBatchGradeSize> CashSaleBatchGradeSizes { get; set; }
        public virtual DbSet<BuveraCategory> BuveraCategories { get; set; }
        public virtual DbSet<WeightNoteSupply> WeightNoteSupplies { get; set; }
        public virtual DbSet<WeightNoteRange> WeightNoteRanges { get; set; }
        public virtual DbSet<WeightNoteNumber> WeightNoteNumbers { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<AspNetUserCode> AspNetUserCodes { get; set; }
        public virtual DbSet<AspNetUserProduct> AspNetUserProducts { get; set; }
        public virtual DbSet<Requistion> Requistions { get; set; }
    
        public virtual int Mark_FactoryExpense_AsDeleted(Nullable<long> inPutFactoryExpenseId, string userId)
        {
            var inPutFactoryExpenseIdParameter = inPutFactoryExpenseId.HasValue ?
                new ObjectParameter("inPutFactoryExpenseId", inPutFactoryExpenseId) :
                new ObjectParameter("inPutFactoryExpenseId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_FactoryExpense_AsDeleted", inPutFactoryExpenseIdParameter, userIdParameter);
        }
    
        public virtual int Mark_LabourCost_AsDeleted(Nullable<long> inPutLabourCostId, string userId)
        {
            var inPutLabourCostIdParameter = inPutLabourCostId.HasValue ?
                new ObjectParameter("inPutLabourCostId", inPutLabourCostId) :
                new ObjectParameter("inPutLabourCostId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_LabourCost_AsDeleted", inPutLabourCostIdParameter, userIdParameter);
        }
    
        public virtual int Mark_MachineRepair_AsDeleted(Nullable<long> inPutRepairId, string userId)
        {
            var inPutRepairIdParameter = inPutRepairId.HasValue ?
                new ObjectParameter("inPutRepairId", inPutRepairId) :
                new ObjectParameter("inPutRepairId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_MachineRepair_AsDeleted", inPutRepairIdParameter, userIdParameter);
        }
    
        public virtual int Mark_CasualActivity_AsDeleted(Nullable<long> inPutCasualActivityId, string userId)
        {
            var inPutCasualActivityIdParameter = inPutCasualActivityId.HasValue ?
                new ObjectParameter("inPutCasualActivityId", inPutCasualActivityId) :
                new ObjectParameter("inPutCasualActivityId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_CasualActivity_AsDeleted", inPutCasualActivityIdParameter, userIdParameter);
        }
    
        public virtual int Mark_OtherExpense_AsDeleted(Nullable<long> inPutOtherExpenseId, string userId)
        {
            var inPutOtherExpenseIdParameter = inPutOtherExpenseId.HasValue ?
                new ObjectParameter("inPutOtherExpenseId", inPutOtherExpenseId) :
                new ObjectParameter("inPutOtherExpenseId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_OtherExpense_AsDeleted", inPutOtherExpenseIdParameter, userIdParameter);
        }
    
        public virtual int UpdateSupplyWithCompletedStatus(Nullable<long> inPutSupplyId, Nullable<long> statusId, string userId)
        {
            var inPutSupplyIdParameter = inPutSupplyId.HasValue ?
                new ObjectParameter("inPutSupplyId", inPutSupplyId) :
                new ObjectParameter("inPutSupplyId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplyWithCompletedStatus", inPutSupplyIdParameter, statusIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Activity_AsDeleted(Nullable<long> inPutActivityId, string userId)
        {
            var inPutActivityIdParameter = inPutActivityId.HasValue ?
                new ObjectParameter("inPutActivityId", inPutActivityId) :
                new ObjectParameter("inPutActivityId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Activity_AsDeleted", inPutActivityIdParameter, userIdParameter);
        }
    
        public virtual int UpdateStoreStockWithSoldOut(Nullable<long> inPutStockId, Nullable<bool> soldOut, Nullable<long> inPutProductId, string userId)
        {
            var inPutStockIdParameter = inPutStockId.HasValue ?
                new ObjectParameter("inPutStockId", inPutStockId) :
                new ObjectParameter("inPutStockId", typeof(long));
    
            var soldOutParameter = soldOut.HasValue ?
                new ObjectParameter("soldOut", soldOut) :
                new ObjectParameter("soldOut", typeof(bool));
    
            var inPutProductIdParameter = inPutProductId.HasValue ?
                new ObjectParameter("inPutProductId", inPutProductId) :
                new ObjectParameter("inPutProductId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStoreStockWithSoldOut", inPutStockIdParameter, soldOutParameter, inPutProductIdParameter, userIdParameter);
        }
    
        public virtual int UpdateOrderWithCompletedStatus(Nullable<long> inPutOrderId, Nullable<long> statusId, Nullable<double> balance, string userId)
        {
            var inPutOrderIdParameter = inPutOrderId.HasValue ?
                new ObjectParameter("inPutOrderId", inPutOrderId) :
                new ObjectParameter("inPutOrderId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(long));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(double));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderWithCompletedStatus", inPutOrderIdParameter, statusIdParameter, balanceParameter, userIdParameter);
        }
    
        public virtual int Mark_Utility_AsDeleted(Nullable<long> inPutUtilityId, string userId)
        {
            var inPutUtilityIdParameter = inPutUtilityId.HasValue ?
                new ObjectParameter("inPutUtilityId", inPutUtilityId) :
                new ObjectParameter("inPutUtilityId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Utility_AsDeleted", inPutUtilityIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Requistion_AsDeleted(Nullable<long> inPutRequistionId, string userId)
        {
            var inPutRequistionIdParameter = inPutRequistionId.HasValue ?
                new ObjectParameter("inPutRequistionId", inPutRequistionId) :
                new ObjectParameter("inPutRequistionId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Requistion_AsDeleted", inPutRequistionIdParameter, userIdParameter);
        }
    
        public virtual int UpdateRequistionWithCompletedStatus(Nullable<long> inPutRequistionId, Nullable<long> statusId, string userId)
        {
            var inPutRequistionIdParameter = inPutRequistionId.HasValue ?
                new ObjectParameter("inPutRequistionId", inPutRequistionId) :
                new ObjectParameter("inPutRequistionId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRequistionWithCompletedStatus", inPutRequistionIdParameter, statusIdParameter, userIdParameter);
        }
    
        public virtual int UpdateOrderWithInProgressStatus(Nullable<long> inPutOrderId, Nullable<long> statusId, Nullable<double> balance, string userId)
        {
            var inPutOrderIdParameter = inPutOrderId.HasValue ?
                new ObjectParameter("inPutOrderId", inPutOrderId) :
                new ObjectParameter("inPutOrderId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(long));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(double));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderWithInProgressStatus", inPutOrderIdParameter, statusIdParameter, balanceParameter, userIdParameter);
        }
    
        public virtual int UpdateBatchBrandQuantity(Nullable<long> inPutBatchId, Nullable<double> quantity, string userId)
        {
            var inPutBatchIdParameter = inPutBatchId.HasValue ?
                new ObjectParameter("inPutBatchId", inPutBatchId) :
                new ObjectParameter("inPutBatchId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(double));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBatchBrandQuantity", inPutBatchIdParameter, quantityParameter, userIdParameter);
        }
    
        public virtual int UpdateOrderWithBalanceQuantity(Nullable<long> inPutOrderId, Nullable<double> quantity, string userId)
        {
            var inPutOrderIdParameter = inPutOrderId.HasValue ?
                new ObjectParameter("inPutOrderId", inPutOrderId) :
                new ObjectParameter("inPutOrderId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(double));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderWithBalanceQuantity", inPutOrderIdParameter, quantityParameter, userIdParameter);
        }
    
        public virtual int UpdateOrderGradeSizes(Nullable<long> orderId, Nullable<long> gradeId, Nullable<long> sizeId, Nullable<double> quantity, Nullable<double> balance)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(long));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("gradeId", gradeId) :
                new ObjectParameter("gradeId", typeof(long));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("sizeId", sizeId) :
                new ObjectParameter("sizeId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(double));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderGradeSizes", orderIdParameter, gradeIdParameter, sizeIdParameter, quantityParameter, balanceParameter);
        }
    
        public virtual ObjectResult<GetOrderToDeliver_Result> GetOrderToDeliver(Nullable<long> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderToDeliver_Result>("GetOrderToDeliver", orderIdParameter);
        }
    
        public virtual int UpdateMaizeBrandBatchQuantity(Nullable<long> inPutMaizeStoreId, Nullable<double> quantity, string userId)
        {
            var inPutMaizeStoreIdParameter = inPutMaizeStoreId.HasValue ?
                new ObjectParameter("inPutMaizeStoreId", inPutMaizeStoreId) :
                new ObjectParameter("inPutMaizeStoreId", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(double));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMaizeBrandBatchQuantity", inPutMaizeStoreIdParameter, quantityParameter, userIdParameter);
        }
    
        public virtual int UpdateSupplyOnRequistionApproval(Nullable<long> inPutSupplyId, Nullable<bool> isPaid, Nullable<double> amountToPay, Nullable<double> partialAmount, Nullable<bool> partiallyPaid, string userId)
        {
            var inPutSupplyIdParameter = inPutSupplyId.HasValue ?
                new ObjectParameter("inPutSupplyId", inPutSupplyId) :
                new ObjectParameter("inPutSupplyId", typeof(long));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("isPaid", isPaid) :
                new ObjectParameter("isPaid", typeof(bool));
    
            var amountToPayParameter = amountToPay.HasValue ?
                new ObjectParameter("amountToPay", amountToPay) :
                new ObjectParameter("amountToPay", typeof(double));
    
            var partialAmountParameter = partialAmount.HasValue ?
                new ObjectParameter("partialAmount", partialAmount) :
                new ObjectParameter("partialAmount", typeof(double));
    
            var partiallyPaidParameter = partiallyPaid.HasValue ?
                new ObjectParameter("partiallyPaid", partiallyPaid) :
                new ObjectParameter("partiallyPaid", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplyOnRequistionApproval", inPutSupplyIdParameter, isPaidParameter, amountToPayParameter, partialAmountParameter, partiallyPaidParameter, userIdParameter);
        }
    
        public virtual int Mark_AccountTransactionActivity_AsDeleted(Nullable<long> inPutTransactionId, string userId)
        {
            var inPutTransactionIdParameter = inPutTransactionId.HasValue ?
                new ObjectParameter("inPutTransactionId", inPutTransactionId) :
                new ObjectParameter("inPutTransactionId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_AccountTransactionActivity_AsDeleted", inPutTransactionIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Cash_AsDeleted(Nullable<long> inPutCashId, string userId, Nullable<long> branchId)
        {
            var inPutCashIdParameter = inPutCashId.HasValue ?
                new ObjectParameter("inPutCashId", inPutCashId) :
                new ObjectParameter("inPutCashId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Cash_AsDeleted", inPutCashIdParameter, userIdParameter, branchIdParameter);
        }
    
        public virtual int Mark_Order_AsDeleted(Nullable<long> inPutOrderId, string userId)
        {
            var inPutOrderIdParameter = inPutOrderId.HasValue ?
                new ObjectParameter("inPutOrderId", inPutOrderId) :
                new ObjectParameter("inPutOrderId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Order_AsDeleted", inPutOrderIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Store_AsDeleted(Nullable<long> inPutStoreId, string userId)
        {
            var inPutStoreIdParameter = inPutStoreId.HasValue ?
                new ObjectParameter("inPutStoreId", inPutStoreId) :
                new ObjectParameter("inPutStoreId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Store_AsDeleted", inPutStoreIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Utility_AccountTransaction_AsDeleted(Nullable<long> inPutUtilityAccountId, string userId, Nullable<long> utilityCategoryId)
        {
            var inPutUtilityAccountIdParameter = inPutUtilityAccountId.HasValue ?
                new ObjectParameter("inPutUtilityAccountId", inPutUtilityAccountId) :
                new ObjectParameter("inPutUtilityAccountId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var utilityCategoryIdParameter = utilityCategoryId.HasValue ?
                new ObjectParameter("utilityCategoryId", utilityCategoryId) :
                new ObjectParameter("utilityCategoryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Utility_AccountTransaction_AsDeleted", inPutUtilityAccountIdParameter, userIdParameter, utilityCategoryIdParameter);
        }
    
        public virtual int Mark_AssetCategory_AsDeleted(Nullable<long> inPutAssetCategoryId, string userId)
        {
            var inPutAssetCategoryIdParameter = inPutAssetCategoryId.HasValue ?
                new ObjectParameter("inPutAssetCategoryId", inPutAssetCategoryId) :
                new ObjectParameter("inPutAssetCategoryId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_AssetCategory_AsDeleted", inPutAssetCategoryIdParameter, userIdParameter);
        }
    
        public virtual int Mark_Asset_AsDeleted(Nullable<long> inPutAssetId, string userId)
        {
            var inPutAssetIdParameter = inPutAssetId.HasValue ?
                new ObjectParameter("inPutAssetId", inPutAssetId) :
                new ObjectParameter("inPutAssetId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Asset_AsDeleted", inPutAssetIdParameter, userIdParameter);
        }
    
        public virtual int UpdateSupplyWithInProgressStatus(Nullable<long> inPutSupplyId, Nullable<long> statusId, string userId)
        {
            var inPutSupplyIdParameter = inPutSupplyId.HasValue ?
                new ObjectParameter("inPutSupplyId", inPutSupplyId) :
                new ObjectParameter("inPutSupplyId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplyWithInProgressStatus", inPutSupplyIdParameter, statusIdParameter, userIdParameter);
        }
    
        public virtual int Mark_FinancialAccountTransaction_AsDeleted(Nullable<long> inPutFinancialAccountId, string userId, Nullable<long> inPutFinancialAccountTransactionId)
        {
            var inPutFinancialAccountIdParameter = inPutFinancialAccountId.HasValue ?
                new ObjectParameter("inPutFinancialAccountId", inPutFinancialAccountId) :
                new ObjectParameter("inPutFinancialAccountId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var inPutFinancialAccountTransactionIdParameter = inPutFinancialAccountTransactionId.HasValue ?
                new ObjectParameter("inPutFinancialAccountTransactionId", inPutFinancialAccountTransactionId) :
                new ObjectParameter("inPutFinancialAccountTransactionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_FinancialAccountTransaction_AsDeleted", inPutFinancialAccountIdParameter, userIdParameter, inPutFinancialAccountTransactionIdParameter);
        }
    
        public virtual int Mark_WeightLoss_AsDeleted(Nullable<long> inPutWeightLossId, string userId)
        {
            var inPutWeightLossIdParameter = inPutWeightLossId.HasValue ?
                new ObjectParameter("inPutWeightLossId", inPutWeightLossId) :
                new ObjectParameter("inPutWeightLossId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_WeightLoss_AsDeleted", inPutWeightLossIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckIfWeightNoteExists(string inPutWeightNoteNumber)
        {
            var inPutWeightNoteNumberParameter = inPutWeightNoteNumber != null ?
                new ObjectParameter("inPutWeightNoteNumber", inPutWeightNoteNumber) :
                new ObjectParameter("inPutWeightNoteNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckIfWeightNoteExists", inPutWeightNoteNumberParameter);
        }
    
        public virtual int Mark_Delivery_AsDeleted(Nullable<long> inPutDeliveryId, string userId)
        {
            var inPutDeliveryIdParameter = inPutDeliveryId.HasValue ?
                new ObjectParameter("inPutDeliveryId", inPutDeliveryId) :
                new ObjectParameter("inPutDeliveryId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Delivery_AsDeleted", inPutDeliveryIdParameter, userIdParameter);
        }
    
        public virtual int Update_Delivery_WithApprovedOrRejected(Nullable<long> inPutDeliveryId, Nullable<bool> approved, string userId)
        {
            var inPutDeliveryIdParameter = inPutDeliveryId.HasValue ?
                new ObjectParameter("inPutDeliveryId", inPutDeliveryId) :
                new ObjectParameter("inPutDeliveryId", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Delivery_WithApprovedOrRejected", inPutDeliveryIdParameter, approvedParameter, userIdParameter);
        }
    
        public virtual int Update_OutPut_WithApprovedOrRejected(Nullable<long> inPutOutSourcerOutPutId, Nullable<bool> approved, string userId)
        {
            var inPutOutSourcerOutPutIdParameter = inPutOutSourcerOutPutId.HasValue ?
                new ObjectParameter("inPutOutSourcerOutPutId", inPutOutSourcerOutPutId) :
                new ObjectParameter("inPutOutSourcerOutPutId", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OutPut_WithApprovedOrRejected", inPutOutSourcerOutPutIdParameter, approvedParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetDashBoardNotifications_Result> GetDashBoardNotifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashBoardNotifications_Result>("GetDashBoardNotifications");
        }
    
        public virtual int Update_RiceInPut_WithApprovedOrRejected(Nullable<long> inPutId, Nullable<bool> approved, string userId)
        {
            var inPutIdParameter = inPutId.HasValue ?
                new ObjectParameter("inPutId", inPutId) :
                new ObjectParameter("inPutId", typeof(long));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_RiceInPut_WithApprovedOrRejected", inPutIdParameter, approvedParameter, userIdParameter);
        }
    }
}
